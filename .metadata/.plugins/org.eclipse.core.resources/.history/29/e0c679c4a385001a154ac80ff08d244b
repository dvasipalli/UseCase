package com.usecase.DEMOAccountInfo;

import java.util.HashMap;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
public class DemoAccountInfoController {
	
    private static final Logger LOGGER = LogManager.getLogger(DemoAccountInfoController.class);

	@Autowired
	private RestTemplate restTemplate;
	
	private AccountInfoResponse response = new AccountInfoResponse();
	
	@PostMapping("/bank/user/dashboard/accountInfo")
	public AccountInfoResponse accountInfo (@RequestBody AccountInfoRequest request) {
		
		LOGGER.info(request);
		validateUser(request.getUserID(), request.getSessionID());
		
		Map<String, String> params = new HashMap<>();
		params.put("userID", request.getUserID());
		
		ResponseEntity<Account[]> responseAccounts = restTemplate.getForEntity("http://demo-database/user/dashboard/accountInfo/{userID}",
				Account[].class, params);
		response.setAccounts(responseAccounts.getBody());
	
		return response;
	}
	
	private boolean validateUser(String userID, String sessionID) {
		
		Map<String, String> params = new HashMap<>();
		params.put("userID", userID);
		
		try {
			User user = restTemplate.getForEntity("http://demo-database/user/authentication/{userID}", 
					User.class, params).getBody();
			if (user.getCustomerSessionID().compareTo(sessionID) == 0) { 				//session ID matches
				if(user.getSessionStatus().compareToIgnoreCase("ACTIVE") == 0) {		// session active
					return true;
				} else {																// session inactive
					setErrorResponse("SESSION_INACTIVE", "The session is inactive, please login again");
					return false;
				}
			} else {																	// Invalid session ID
				setErrorResponse("INVALID_SESSION", "Session not found with session id: " + sessionID());
				return false;
			}
		} catch (Exception e) {
			LOGGER.info(e);
			setErrorResponse("INVALID_USER", "User not found with user id: " + userID());
			return false;
		}
	}
	
	private void setErrorResponse(String errorCode, String errorMessage) {
		response.setErrorCode(errorCode);
		response.setErrorMessage(errorMessage);
	}
	@GetMapping(path="/bank/user/rewards/{userID}")
	public AccountInfoResponse getRewards(@PathVariable String userID, @RequestHeader String sessionID) {
		AccountInfoResponse response = new AccountInfoResponse();
		LOGGER.info(userID);
		LOGGER.info("******* ---------> " + sessionID);
		
		Map<String, String> params = new HashMap<>();
		params.put("userID", userID);
		
		try {
			ResponseEntity<User> responseFromDB = restTemplate.getForEntity("http://demo-database/user/authentication?userID={userID}", 
					User.class, params);
			
			User user = responseFromDB.getBody();
			LOGGER.info(user);
			
			if (user.getCustomerSessionID().compareTo(sessionID) == 0) { 			//session ID matches
				if(user.getSessionStatus().compareToIgnoreCase("ACTIVE") == 0) {	// session active
					ResponseEntity<Reward[]> responseRewards = restTemplate.getForEntity("http://demo-database/user/rewards/{userID}",
					Reward[].class, params);
					response.setRewards(responseRewards.getBody());
				} else {															// session inactive
					response.setErrorCode("SESSION_INACTIVE");
					response.setErrorMessage("The session is inactive, please login again");
				}
			} else {																// Invalid session ID
				response.setErrorCode("INVALID_SESSION");
				response.setErrorMessage("Session not found with session id: " + sessionID);
			}				
		} catch(Exception e) {
			LOGGER.info(e);
			response.setErrorCode("INVALID_USER");
			response.setErrorMessage("User not found with user id: " + userID);
		}
		
		return response;
	}
	
	@PostMapping("/bank/user/dashboard/transactions")
	public AccountInfoResponse transactionInfo (@RequestBody AccountInfoRequest request) {
		AccountInfoResponse response = new AccountInfoResponse();
		
		Map<String, String> params = new HashMap<>();
		params.put("sessionID", request.getSessionID());
		
		try {
			ResponseEntity<User> responseFromDB = restTemplate.getForEntity("http://demo-database/user?sessionID={sessionID}", 
					User.class, params);
			
			User user = responseFromDB.getBody();
			LOGGER.info(user);
			
			if(user.getSessionStatus().compareToIgnoreCase("ACTIVE") == 0) {		// session active
				params.remove("sessionID");
				params.put("accountNumber", request.getAccountNumber());
				
				ResponseEntity<Transaction[]> responseTransactions = restTemplate.getForEntity("http://demo-database//user/dashboard/transactions/{accountNumber}",
						Transaction[].class, params);
				response.setTransactions(responseTransactions.getBody());
			} else {																// session inactive
				response.setErrorCode("SESSION_INACTIVE");
				response.setErrorMessage("The session is inactive, please login again");
			}
							
		} catch(Exception e) {														// invalid session
			LOGGER.info(e);
			response.setErrorCode("INVALID_SESSION_OR_ACCOUNT_NUMBER");
			response.setErrorMessage("Session not found with session id: " + request.getSessionID());
		}
		return response;
	}
}
